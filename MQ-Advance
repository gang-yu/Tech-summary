
---队列本身---

## 消息量太大，一时消费不了，怎么办？
hint：惰性队列



---队列综合应用---

## 事务中包含消息发送，该如何处理好？
hint：一致性
A：
发送消息->DB:
如果消息发送成功而DB失败，会出现一致性问题。
Db->发送消息：
如果DB成功而消息发送失败，可以进行DB的补偿或者回滚，从而保证一致性。
这需要在生产者/消费者两端都增加DB表来对应待发送、已收取的消息。如下是一个他人的实现。
https://github.com/zjpjohn/ActiveMQ



## 如何保证消息不丢失？
hint：
确认机制+重试+消息持久化



## 如何处理重复消息？
hint：生产者、MQ、消费者
A：
生产者没有收到ack确认，生产者就可以重试，多次发送。需要MQ能唯一标识一条消息。

消费者没有回复ack给MQ，MQ就可以重试，对此推送。需要消费者能唯一标识一条消息，同时做到处理能力的幂等性。



## 消息的到达顺序与发送顺序不一致？顺序不是严格要求一致
比如，第三方支付的回报，第2条成功回报先到，第1条收到回报后到。
虽然这个例子与MQ无关，但是MQ也会碰上。尤其是消息分发给消费者集群中的不同service的时候。
hint：
服务要robust，比如有状态机的判断，这样一来，状态不会退化，避免了错误。



## 消息的到达顺序与发送顺序不一致？顺序要求严格一致
比如，OA审批流程的消息，前一个节点消息是后一个节点的判断依据。
hint
我想想，这个有点搞大了
